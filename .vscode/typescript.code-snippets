{
  "Generic Component": {
    "prefix": "BBComponent",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "import { useAppDispatch, useAppSelector, Id, StateUpdates, idOrDefault } from '../framework';",
      "",
      "",
      "interface State {",
      "  ${1/(.*)/${1:/downcase}/}s: Record<Id, $1State | undefined>;",
      "}",
      "",
      "interface $1State {",
      "  $2",
      "}",
      "",
      "const initialState: State = {",
      "  ${1/(.*)/${1:/downcase}/}s: {",
      "    'default': {",
      "      $3",
      "    }",
      "  },",
      "};",
      "",
      "export function use$1(id?: string): $1State | undefined {",
      "  return useAppSelector(",
      "    (state) => state.ui.${1/(.*)/${1:/downcase}/}State.${1/(.*)/${1:/downcase}/}s[idOrDefault(id)]",
      "  );",
      "}",
      "",
      "export function useUpsert$1(): (",
      "  ${1/(.*)/${1:/downcase}/}: Partial<$1State>,",
      "  id?: string,",
      ") => void {",
      "  const dispatch = useAppDispatch();",
      "  return (${1/(.*)/${1:/downcase}/}, ${1/(.*)/${1:/downcase}/}Id) =>",
      "    dispatch(upsert$1({ ${1/(.*)/${1:/downcase}/}, ${1/(.*)/${1:/downcase}/}Id }));",
      "}",
      "",
      "interface Upsert$1Payload {",
      "  ${1/(.*)/${1:/downcase}/}Id?: Id;",
      "  ${1/(.*)/${1:/downcase}/}: Partial<$1State>;",
      "}",
      "",
      "const stateUpdates: StateUpdates<Upsert$1Payload, State> = {",
      "  upsert$1: (state, action: PayloadAction<Upsert$1Payload>) => {",
      "    const ${1/(.*)/${1:/downcase}/} = state.${1/(.*)/${1:/downcase}/}s[idOrDefault(action.payload.${1/(.*)/${1:/downcase}/}Id)];",
      "    if(${1/(.*)/${1:/downcase}/}) {",
      "      Object.entries(action.payload.${1/(.*)/${1:/downcase}/}).forEach(([key, value]) => {",
      "        const typedKey = key as keyof $1State;",
      "        ${1/(.*)/${1:/downcase}/}[typedKey] = value as $1State[typeof typedKey];",
      "      })",
      "    }",
      "  },",
      "};",
      "",
      "const slice = createSlice({",
      "  name: '${1/(.*)/${1:/downcase}/}',",
      "  initialState,",
      "  reducers: {",
      "    ...stateUpdates,",
      "  },",
      "});",
      "",
      "export const { upsert$1 } = slice.actions;",
      "",
      "const $1: React.FC<{",
      "  children: React.ReactNode;",
      "  className?: string;",
      "}> = ({ children, className }) => (",
      "  <div",
      "    className={className}",
      "  >",
      "    {children}",
      "  </div>",
      ");",
      "",
      "export const _$1 = {",
      "  reducer: slice.reducer",
      "}",
      "",
      "export default $1"
    ],
    "description": "Generic BigBrain Component Snippet"
  }
}
